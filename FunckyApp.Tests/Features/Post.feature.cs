// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FunckyApp.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class PostsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Post.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Posts", "In order to keep it funcky\r\nAs an API consumer\r\nI want to create and retriveve in" +
                    "flationary messages", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Posts")))
            {
                FunckyApp.Tests.Features.PostsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create and get Post")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Posts")]
        public virtual void CreateAndGetPost()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and get Post", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("url is \'/Token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("request content is \'grant_type=password&username=FunckyUser&password=1234567\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.When("I add a request header Content-Type : \'application/x-www-form-urlencoded\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.And("submit a POST request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.Then("response Status Code should be OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 15
 testRunner.When("the following query is run against response: \'concat(\"Bearer \", //access_token/te" +
                    "xt())\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("all is cool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
 testRunner.Given("url is \'api/posts\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table1.AddRow(new string[] {
                        "Accept",
                        "\'application/xml\'"});
            table1.AddRow(new string[] {
                        "Content-Type",
                        "\'application/json\'"});
            table1.AddRow(new string[] {
                        "Authorization",
                        "query result"});
#line 19
 testRunner.And("request headers are", ((string)(null)), table1, "And ");
#line 26
 testRunner.And("request content is \'{ message: \"one plus two equals three\", inflationRate: 1 }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.When("I submit a POST request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("response Status Code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 30
 testRunner.And("response header Location should exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.Given("url is response header Location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.When("I submit a GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then("response Status Code should be OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "expected",
                        "query"});
            table2.AddRow(new string[] {
                        "\'one\'",
                        "\'//TextFragmentViewModel[1]/OriginalText\'"});
            table2.AddRow(new string[] {
                        "\'two\'",
                        "\'//TextFragmentViewModel[1]/InflatedText\'"});
            table2.AddRow(new string[] {
                        "true",
                        "\'//TextFragmentViewModel[1]/IsInflated\'"});
            table2.AddRow(new string[] {
                        "\' plus \'",
                        "\'//TextFragmentViewModel[2]/OriginalText\'"});
            table2.AddRow(new string[] {
                        "false",
                        "\'//TextFragmentViewModel[2]/IsInflated\'"});
            table2.AddRow(new string[] {
                        "\'two\'",
                        "\'//TextFragmentViewModel[3]/OriginalText\'"});
            table2.AddRow(new string[] {
                        "\'three\'",
                        "\'//TextFragmentViewModel[3]/InflatedText\'"});
            table2.AddRow(new string[] {
                        "true",
                        "\'//TextFragmentViewModel[3]/IsInflated\'"});
            table2.AddRow(new string[] {
                        "\' equals \'",
                        "\'//TextFragmentViewModel[4]/OriginalText\'"});
            table2.AddRow(new string[] {
                        "false",
                        "\'//TextFragmentViewModel[4]/IsInflated\'"});
            table2.AddRow(new string[] {
                        "\'three\'",
                        "\'//TextFragmentViewModel[5]/OriginalText\'"});
            table2.AddRow(new string[] {
                        "\'four\'",
                        "\'//TextFragmentViewModel[5]/InflatedText\'"});
            table2.AddRow(new string[] {
                        "true",
                        "\'//TextFragmentViewModel[5]/IsInflated\'"});
            table2.AddRow(new string[] {
                        "\'FunckyUser\'",
                        "\'//Author\'"});
#line 36
 testRunner.And("the following assertions against response should pass:", ((string)(null)), table2, "And ");
#line 53
 testRunner.When("the following query is run against response: \'//Link[Rel/text() = \"self\"]/Href/te" +
                    "xt()\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
 testRunner.Then("all is cool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 57
 testRunner.Given("url is query result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table3.AddRow(new string[] {
                        "Accept",
                        "\'application/json\'"});
#line 58
 testRunner.And("request headers are", ((string)(null)), table3, "And ");
#line 61
 testRunner.When("I submit a GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
 testRunner.Then("response Status Code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "expected",
                        "query"});
            table4.AddRow(new string[] {
                        "\'one\'",
                        "\'//fragments[1]/originalText\'"});
            table4.AddRow(new string[] {
                        "\'two\'",
                        "\'//fragments[1]/inflatedText\'"});
            table4.AddRow(new string[] {
                        "true",
                        "\'//fragments[1]/isInflated\'"});
            table4.AddRow(new string[] {
                        "\' plus \'",
                        "\'//fragments[2]/originalText\'"});
            table4.AddRow(new string[] {
                        "false",
                        "\'//fragments[2]/isInflated\'"});
            table4.AddRow(new string[] {
                        "\'two\'",
                        "\'//fragments[3]/originalText\'"});
            table4.AddRow(new string[] {
                        "\'three\'",
                        "\'//fragments[3]/inflatedText\'"});
            table4.AddRow(new string[] {
                        "true",
                        "\'//fragments[3]/isInflated\'"});
            table4.AddRow(new string[] {
                        "\' equals \'",
                        "\'//fragments[4]/originalText\'"});
            table4.AddRow(new string[] {
                        "false",
                        "\'//fragments[4]/isInflated\'"});
            table4.AddRow(new string[] {
                        "\'three\'",
                        "\'//fragments[5]/originalText\'"});
            table4.AddRow(new string[] {
                        "\'four\'",
                        "\'//fragments[5]/inflatedText\'"});
            table4.AddRow(new string[] {
                        "true",
                        "\'//fragments[5]/isInflated\'"});
            table4.AddRow(new string[] {
                        "\'FunckyUser\'",
                        "\'//author\'"});
#line 64
 testRunner.And("the following assertions against response should pass:", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
