// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FunckyApp.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CommonValidationsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CommonValidations.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CommonValidations", "In order to keep it funcky \r\nI want to run common validations on ALL THE THINGS.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "CommonValidations")))
            {
                FunckyApp.Tests.Features.CommonValidationsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
 #line 8
 testRunner.Given("base url is \'http://localhost:37580/\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "alias",
                        "namespace"});
            table1.AddRow(new string[] {
                        "a",
                        "http://schemas.datacontract.org/2004/07/FunckyApp.Models"});
#line 9
 testRunner.And("xml namespace aliases are", ((string)(null)), table1, "And ");
#line 16
 testRunner.Given("url is \'Services/ScriptCompilerService.svc\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
 testRunner.And("request content is <content>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table2.AddRow(new string[] {
                        "Accept",
                        "\'application/xml\'"});
            table2.AddRow(new string[] {
                        "Content-Type",
                        "\'text/xml; charset=utf-8\'"});
            table2.AddRow(new string[] {
                        "SOAPAction",
                        "\'http://schemas.datacontract.org/2004/07/FunckyApp.Services/CompilerServices/GetS" +
                            "criptStats\'"});
#line 20
 testRunner.And("request headers are", ((string)(null)), table2, "And ");
#line 27
 testRunner.And("xslt is FILE(XSLT\\ScriptToSOAPGetScriptStatsRequest.xslt)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.When("request content is transformed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.And("I submit a post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.Then("response Status Code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "expected",
                        "query"});
            table3.AddRow(new string[] {
                        "<isValid>",
                        "\'//a:IsValid\'"});
            table3.AddRow(new string[] {
                        "<invalidTokensCount>",
                        "\'count(//a:InvalidTokens/child::node())\'"});
            table3.AddRow(new string[] {
                        "<identifierCount>",
                        "\'count(//a:IdentifierStats)\'"});
            table3.AddRow(new string[] {
                        "<literalCount>",
                        "\'count(//a:NumericLiteralStatistics[1]/a:LiteralStats)\'"});
            table3.AddRow(new string[] {
                        "<3Count>",
                        "\'//a:NumericLiteralStatistics[1]/a:LiteralStats[a:Value=\'3\']/a:Count\'"});
#line 32
 testRunner.And("the following assertions against response should pass:", ((string)(null)), table3, "And ");
#line hidden
        }
    }
}
#pragma warning restore
#endregion
